version: '3.8'

networks:
  neovision_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: neovision-br
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: neovision
      POSTGRES_USER: neovision
      POSTGRES_PASSWORD: neovision123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - neovision_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neovision"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for document storage
  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: neovision
      MONGO_INITDB_ROOT_PASSWORD: neovision123
      MONGO_INITDB_DATABASE: neovision
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - neovision_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - neovision_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.full
    command: ["python", "-m", "uvicorn", "backend.main_lazy:app", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8001:8000"  # Host port 8001 â†’ Container port 8000
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://neovision:neovision123@postgres:5432/neovision
      - MONGODB_URL=mongodb://neovision:neovision123@mongodb:27017/neovision
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app/backend
      - MODEL_DOWNLOAD_ON_STARTUP=false
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - NO_PROXY=localhost,127.0.0.1,postgres,mongodb,redis
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/backend/uploads
      - ./backend/temp:/app/backend/temp
      - ./backend/logs:/app/backend/logs
    networks:
      - neovision_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
