version: '3.8'

services:
  # Main application (all-in-one container)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-neocaptured_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-neocaptured_db}
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost}
      - OCR_LANG=${OCR_LANG:-en,ar}
      - USE_TROCR=${USE_TROCR:-true}
      - TROCR_FALLBACK_THRESHOLD=${TROCR_FALLBACK_THRESHOLD:-0.65}
      - USE_DONUT=${USE_DONUT:-true}
      - DONUT_THRESHOLD=${DONUT_THRESHOLD:-0.60}
      - DONUT_FORCE_TYPES=${DONUT_FORCE_TYPES:-handwritten,unknown}
      - OCR_LANG=${OCR_LANG:-en,ar}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads:/app/uploads
      - models:/app/models
      - logs:/app/logs
    restart: unless-stopped
    networks:
      - idp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-neocaptured_db}
      POSTGRES_USER: ${POSTGRES_USER:-neocaptured_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-neocaptured_user} -d ${POSTGRES_DB:-neocaptured_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - idp_network

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - idp_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  models:
    driver: local
  logs:
    driver: local

networks:
  idp_network:
    driver: bridge
