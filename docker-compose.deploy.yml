version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-neocaptured_db}
      POSTGRES_USER: ${POSTGRES_USER:-neocaptured_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-neocaptured_user} -d ${POSTGRES_DB:-neocaptured_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - idp_network

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - idp_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-neocaptured_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-neocaptured_db}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - OCR_LANG=${OCR_LANG:-en,ar}
      - USE_TROCR=${USE_TROCR:-true}
      - TROCR_FALLBACK_THRESHOLD=${TROCR_FALLBACK_THRESHOLD:-0.65}
      - USE_DONUT=${USE_DONUT:-true}
      - DONUT_THRESHOLD=${DONUT_THRESHOLD:-0.60}
      - DONUT_FORCE_TYPES=${DONUT_FORCE_TYPES:-handwritten,unknown}
      - OCR_LANG=${OCR_LANG:-en,ar}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backend/models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - idp_network

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.prod
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
      - VITE_APP_NAME=${VITE_APP_NAME:-IDP Portal}
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - idp_network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - idp_network
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  idp_network:
    driver: bridge
