# Full IDP Dockerfile with ML dependencies
FROM python:3.10-slim-bullseye

WORKDIR /app

# Harden pip installs for reliability in CI/Docker
ENV PIP_DEFAULT_TIMEOUT=100 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Common ML cache locations (helps avoid permission issues and makes behavior predictable)
ENV HF_HOME=/root/.cache/huggingface \
    XDG_CACHE_HOME=/root/.cache/xdg \
    PADDLE_OCR_CACHE_DIR=/root/.cache/paddle

# Install system dependencies (compatible with bullseye)
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgcc-s1 \
    libfontconfig1 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxrandr2 \
    libxss1 \
    libasound2 \
    libxtst6 \
    libpangocairo-1.0-0 \
    libatk1.0-0 \
    libcairo-gobject2 \
    libgtk-3-0 \
    libgdk-pixbuf-2.0-0 \
    tesseract-ocr \
    tesseract-ocr-eng \
    tesseract-ocr-ara \
    libtesseract-dev \
    libmagic1 \
    libmagic-dev \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Copy and install Python dependencies
COPY backend/requirements.txt ./backend/

# Ensure latest pip tooling and prefer binary wheels
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Pin Paddle to a version with reliable Linux wheels and adjust requirements accordingly
# (Paddle 3.x wheels can be unavailable/slow on some Ubuntu runners)
RUN sed -i 's/^paddlepaddle==.*/paddlepaddle==2.5.2/' backend/requirements.txt && \
    sed -i 's/^paddleocr==.*/paddleocr==2.7.3/' backend/requirements.txt

# Install dependencies with a bias toward prebuilt wheels
RUN pip install --no-cache-dir --prefer-binary -r backend/requirements.txt

# Pre-download PaddleOCR models at build time to avoid runtime downloads
# This creates cache under /root/.paddleocr which runtime will reuse
RUN python - <<'PY'
import time
from paddleocr import PaddleOCR

langs = ["en"]  # add other langs if needed, e.g., "ar"
for lang in langs:
    succeeded = False
    for attempt in range(1, 6):
        try:
            print(f"[PaddleOCR preload] Initializing for lang={lang}, attempt {attempt}...")
            PaddleOCR(use_angle_cls=True, lang=lang, use_gpu=False, show_log=False)
            print(f"[PaddleOCR preload] Success for lang={lang}")
            succeeded = True
            break
        except Exception as e:
            print(f"[PaddleOCR preload] Failed (attempt {attempt}) for {lang}: {e}")
            time.sleep(3 * attempt)
    if not succeeded:
        print(f"[PaddleOCR preload] Skipping preload for {lang} (will load at runtime if cache is present)")
PY

# Install Celery
RUN pip install --no-cache-dir celery[redis]

# Download spaCy model
RUN python -m spacy download en_core_web_sm

# Copy backend code
COPY backend/ ./backend/
RUN rm -rf backend/neoidp

# Create necessary directories
RUN mkdir -p backend/models/trained backend/models/layout backend/models/spacy \
    backend/uploads backend/temp backend/logs

# Expose port
EXPOSE 8000

# Start the application
CMD ["python", "-m", "uvicorn", "backend.main:app", "--host", "0.0.0.0", "--port", "8000"]
